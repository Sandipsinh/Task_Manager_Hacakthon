using Azure.AI.OpenAI;
using Azure;
using System.Text.Json;
using System.Text;
using Task_Manager_Hacakthon.Modal;
using System.Text.RegularExpressions;

namespace Task_Manager_Hacakthon.Services
{

    public class AzureOpenAIService
    {
        private readonly OpenAIClient _client;
        private readonly string _deployment;
        private readonly string _apiKey;
        private readonly string _apiendPoint;

        public AzureOpenAIService(IConfiguration config)
        {
            _client = new OpenAIClient(new Uri(config["AzureOpenAI:Endpoint"]),
                new AzureKeyCredential(config["AzureOpenAI:ApiKey"]));
            _deployment = config["AzureOpenAI:DeploymentName"];
            _apiKey = config["AzureOpenAI:ApiKey"];
            _apiendPoint = config["AzureOpenAI:Endpoint"];
        }

        public async Task<string> GenerateTasksAsync(string jsonData, string email, string prompt)
        {

            using HttpClient client = new HttpClient();
            client.DefaultRequestHeaders.Add("api-key", _apiKey);

            var requestData = new
            {
                messages = new[]
        {
    new { role = "system", content = "You are an AI assistant that helps people find task information." },
      new { role = "system", content = $"Filtered Data:\n{jsonData}" },
    new { role = "user", content = $"You are a data extraction assistant.From the input text below, extract only the tasks where `userId` contains {email} .{prompt} \r\n \r\nEach object in the array should have the following fields:\r\n- engagementId\r\n- engagementName\r\n- title\r\n- description\r\n- priority\r\n- userId\r\n- taskName\r\n \r\n \r\nAlways return the result in this exact JSON format without any additional explanation or text:{{\r\n\"EngagementId\":\"C9EC5160-3540-4BDE-4680-08DA14114610\",\r\n\"EngagementName\":\"valid banner\",\r\n\"Title\":\"valid banner\",\r\n\"Description\":\"Preparer Assigned\",\r\n\"Priority\":\"High\",\r\n\"UserID\":\"abv@kpmg.ca\",\r\n\"TaskName\":\"NoPreparerAssigned\"\r\n}}.Replace the example numbers with real values retrieved from the documents.\r\nThe output must be a single, complete, valid JSON array. Do not add explanations or comments.\r\n \r\nIf there are no matching tasks, return: []." },
    new {role="user",content="Validate that the JSON output is fully formed before returning it."}

},
                max_tokens = 3000
            };
            string jsonRequest = JsonSerializer.Serialize(requestData, new JsonSerializerOptions { WriteIndented = true });
            var content = new StringContent(jsonRequest, Encoding.UTF8, "application/json");

            HttpResponseMessage response = await client.PostAsync(_apiendPoint, content);
            string responseString = await response.Content.ReadAsStringAsync();
            using JsonDocument doc = JsonDocument.Parse(responseString);
            JsonElement root = doc.RootElement;
            var responseMessage = root.GetProperty("choices")[0].GetProperty("message").GetProperty("content").GetString();
            responseMessage = Regex.Replace(responseMessage, @"^```json|```$", "", RegexOptions.Multiline).Trim();


            return responseMessage;
        }

        public async Task<string> RefineCombinedTasksAsync(string aiTasksJson, List<TaskItem> userTasks)
        {
            var userTasksJson = JsonSerializer.Serialize(userTasks);


            using HttpClient client = new HttpClient();
            client.DefaultRequestHeaders.Add("api-key", _apiKey);

            var requestData = new
            {
                prompt = $@"
The following are tasks: some were generated by the system, and some were added by the user.
Please clean them up — deduplicate and improve clarity.
Respond in JSON with `title` and `reason`.
 
System Tasks:
{aiTasksJson}
 
User Tasks:
{userTasksJson}",
                max_tokens = 300
            };
            string jsonRequest = JsonSerializer.Serialize(requestData, new JsonSerializerOptions { WriteIndented = true });
            var content = new StringContent(jsonRequest, Encoding.UTF8, "application/json");

            HttpResponseMessage response = await client.PostAsync(_apiendPoint, content);
            string responseString = await response.Content.ReadAsStringAsync();
            using JsonDocument doc = JsonDocument.Parse(responseString);
            JsonElement root = doc.RootElement;
            var responseMessage = root.GetProperty("choices")[0].GetProperty("message").GetProperty("content").GetString();
            return responseMessage;
            //var response = await _client.GetChatCompletionsAsync(
            //    _deployment,
            //    new ChatCompletionsOptions
            //    {
            //        Messages =
            //        {
            //        new ChatMessage(ChatRole.System, "You are a task refining assistant."),
            //        new ChatMessage(ChatRole.User, prompt)
            //        },
            //        Temperature = 0.2f
            //    });

            //return response.Value.Choices[0].Message.Content;
        }


        public async Task<string> GenerateEngagementCountAsync(string jsonData, int taxYear)
        {
            using HttpClient client = new HttpClient();
            client.DefaultRequestHeaders.Add("api-key", _apiKey);

            var requestData = new
            {
                messages = new[]
        {
            new { role = "system", content = "You are an AI assistant that helps people find information." },
              new { role = "system", content = $"Filtered Data:\n{jsonData}" },
            new { role = "user", content = $"You are a strict data formatter. \r\nGive the data for taxyear {taxYear} and the difference with previous year in percetange for all fields\r\n \r\nAlways return the result in this exact JSON format without any additional explanation or text:\r\n{{\r\n  \"tax_year\": \"2025\",  \r\n   \"roll_forward_engagements\": 8,      \r\n    \"roll_forward_difference_percentage\": 60.0,   \r\n    \"activated_engagements\": 568,\r\n     \"activated_engagements_difference_percentage\": -49.6,  \r\n    \"inactivated_engagements\": 3,\r\n      \"inactivated_engagements_difference_percentage\": -72.7   \r\n}}\r\n\r\nReplace the example numbers with real values retrieved from the documents.\r\nOnly return this JSON — no extra commentary." }

        },
                max_tokens = 300
            };
            string jsonRequest = JsonSerializer.Serialize(requestData, new JsonSerializerOptions { WriteIndented = true });
            var content = new StringContent(jsonRequest, Encoding.UTF8, "application/json");

            HttpResponseMessage response = await client.PostAsync(_apiendPoint, content);
            string responseString = await response.Content.ReadAsStringAsync();
            using JsonDocument doc = JsonDocument.Parse(responseString);
            JsonElement root = doc.RootElement;
            var responseMessage = root.GetProperty("choices")[0].GetProperty("message").GetProperty("content").GetString();
            responseMessage = Regex.Replace(responseMessage, @"^```json|```$", "", RegexOptions.Multiline).Trim();
            return responseMessage;
        }

        public async Task<string> GenerateMilestoneInfoAsync(string jsonData, int taxYear)
        {
            using HttpClient client = new HttpClient();
            client.DefaultRequestHeaders.Add("api-key", _apiKey);

            var requestData = new
            {
                messages = new[]
        {
            new { role = "system", content = "You are an AI assistant that helps people find information." },
              new { role = "system", content = $"Filtered Data:\n{jsonData}" },
            new { role = "user", content = $"You are a strict data formatter. \r\nList all milestone records for Tax Year {taxYear} from the data. For each record, include the milestone name and total days spent.Always return the result in this exact JSON format without any additional explanation or text:\r\n{{\r\n[\r\n{{\r\n\"Milestone_Name\":\"Client Review\",\r\n\"Count\" :2\r\n}},\r\n{{\r\n\"Milestone_Name\":\"Final Bill\",\r\n\"Count\" :2\r\n}}\r\n]\r\n}}\r\n\r\nReplace the example numbers with real values retrieved from the documents Do not summarize or skip any records. Return one entry per milestone. If no milestones are found for {taxYear}, say so explicitly .Only return this JSON — no extra commentary." }

        },
                max_tokens = 300
            };
            string jsonRequest = JsonSerializer.Serialize(requestData, new JsonSerializerOptions { WriteIndented = true });
            var content = new StringContent(jsonRequest, Encoding.UTF8, "application/json");

            HttpResponseMessage response = await client.PostAsync(_apiendPoint, content);
            string responseString = await response.Content.ReadAsStringAsync();
            using JsonDocument doc = JsonDocument.Parse(responseString);
            JsonElement root = doc.RootElement;
            var responseMessage = root.GetProperty("choices")[0].GetProperty("message").GetProperty("content").GetString();
            responseMessage = Regex.Replace(responseMessage, @"^```json|```$", "", RegexOptions.Multiline).Trim();

            if (responseMessage.StartsWith("{"))
            {
                responseMessage = responseMessage.Substring(1, responseMessage.Length - 2); // remove outer {}
            }

            return responseMessage;
        }


        public async Task<string> GenerateCRAStatusAsync(string jsonData, int taxYear)
        {
            using HttpClient client = new HttpClient();
            client.DefaultRequestHeaders.Add("api-key", _apiKey);

            var requestData = new
            {
                messages = new[]
        {
            new { role = "system", content = "You are an AI assistant that helps people find information." },
              new { role = "system", content = $"Filtered Data:\n{jsonData}" },
            new { role = "user", content = $"You are a strict data formatter. \r\nList all cra records for Tax Year {taxYear} from the data. For each record, include the office name and ConnectSuccessful and DownloadSuccessful.Always return the result in this exact JSON format without any additional explanation or text:\r\n{{\r\n[\r\n{{\r\n\"office_name\":\"Kelowna\",\r\n\"ConnectSuccessful\" :22,\r\n \"DownloadSuccessful\": 18  \r\n}},\r\n{{\r\n\"office_name\":\"Pool\",\r\n\"ConnectSuccessful\" :22,\r\n \"DownloadSuccessful\": 18  \r\n}}\r\n]\r\n}}\r\n\r\nReplace the example numbers with real values retrieved from the documents Do not summarize or skip any records. Return one entry per office. If no offices are found for {taxYear}, say so explicitly .Only return this JSON — no extra commentary." }

        },
                max_tokens = 300
            };
            string jsonRequest = JsonSerializer.Serialize(requestData, new JsonSerializerOptions { WriteIndented = true });
            var content = new StringContent(jsonRequest, Encoding.UTF8, "application/json");

            HttpResponseMessage response = await client.PostAsync(_apiendPoint, content);
            string responseString = await response.Content.ReadAsStringAsync();
            using JsonDocument doc = JsonDocument.Parse(responseString);
            JsonElement root = doc.RootElement;
            var responseMessage = root.GetProperty("choices")[0].GetProperty("message").GetProperty("content").GetString();
            responseMessage = Regex.Replace(responseMessage, @"^```json|```$", "", RegexOptions.Multiline).Trim();
            if (responseMessage.StartsWith("{"))
            {
                responseMessage = responseMessage.Substring(1, responseMessage.Length - 2); // remove outer {}
            }
            return responseMessage;
        }


        public async Task<string> GenerateEfileOutcomeAsync(string jsonData, int taxYear)
        {
            using HttpClient client = new HttpClient();
            client.DefaultRequestHeaders.Add("api-key", _apiKey);

            var requestData = new
            {
                messages = new[]
        {
            new { role = "system", content = "You are an AI assistant that helps people find information." },
              new { role = "system", content = $"Filtered Data:\n{jsonData}" },
            new { role = "user", content = $"You are a strict data formatter. \r\nGive the data for taxyear {taxYear} and give me all status value in percentage for all fields\r\n \r\nAlways return the result in this exact JSON format without any additional explanation or text:\r\n{{\r\n  \"tax_year\": \"2025\",  \r\n   \"Accepted\":58,  \r\n   \"Transmitted\": 48, \r\n   \"Rejected\": 38, \r\n   \"Paper\": 18, \r\n   \"Approved\": 28,       \r\n      \"\r\n    \"Notrequiered\": 60,\": -72.7   \r\n}}\r\n\r\nReplace the example numbers with real values retrieved from the documents.\r\nOnly return this JSON — no extra commentary." }

        },
                max_tokens = 300
            };
            string jsonRequest = JsonSerializer.Serialize(requestData, new JsonSerializerOptions { WriteIndented = true });
            var content = new StringContent(jsonRequest, Encoding.UTF8, "application/json");

            HttpResponseMessage response = await client.PostAsync(_apiendPoint, content);
            string responseString = await response.Content.ReadAsStringAsync();
            using JsonDocument doc = JsonDocument.Parse(responseString);
            JsonElement root = doc.RootElement;
            var responseMessage = root.GetProperty("choices")[0].GetProperty("message").GetProperty("content").GetString();
            responseMessage = Regex.Replace(responseMessage, @"^```json|```$", "", RegexOptions.Multiline).Trim();
            return responseMessage;
        }



        //public async Task<string> GenerateSummaryAsync(SummaryList request)
        //{

        //    //Search End Points
        //    string searchServiceEndpoint = "https://hackathonmar25.search.windows.net/";
        //    string searchIndexName = "vector-kilimanjaro";
        //    string searchApiKey = "qXHND7pJesfHN3AWh6r5qeltAFaIyZ4jo1lMeL3KEoAzSeBHnvZm";

        //    // Azure OpenAI Config
        //    string openAiEndpoint = "https://your-openai-resource.openai.azure.com/";
        //    string deploymentName = "your-deployment-name";
        //    string openAiApiKey = "D2rfpxZOCy98sRSwXe7w0GYQZ6RIa2qhzHgsCLRVTg5kUmNc5SK4JQQJ99AKACREanaXJ3w3AAABACOGkyHe";
        //    string apiVersion = "2024-02-15-preview";


        //    string userQuery = request.Summaries.LastOrDefault().Content;
        //    var messages = request;
        //    string data = await SearchAzureAI(searchServiceEndpoint, searchIndexName, searchApiKey, userQuery);
        //    string aiResponse = await CallAzureOpenAI(openAiEndpoint, deploymentName, openAiApiKey, apiVersion, userQuery, data);
        //    messages.Summaries.Add(new  SummaryRequest{ Role = "assistant", Content = aiResponse });
        //    string finalJsonResponse = JsonSerializer.Serialize(messages, new JsonSerializerOptions { WriteIndented = true });
        //    return finalJsonResponse;

        //}        


        //public async Task<string> SearchAzureAI(string endpoint, string indexName, string apiKey, string query)
        //{
        //    var client = new SearchClient(new Uri(endpoint), indexName, new AzureKeyCredential(apiKey));
        //    var options = new SearchOptions { Size = 5, QueryType = SearchQueryType.Full };
        //    var searchResults = await client.SearchAsync<SearchDocument>(query, options);

        //    List<string> retrievedDocs = new List<string>();

        //    await foreach (var result in searchResults.Value.GetResultsAsync())
        //    {
        //        if (result.Document.TryGetValue("chunk", out var content))
        //        {
        //            retrievedDocs.Add(content.ToString());
        //        }
        //    }

        //    return string.Join("\n", retrievedDocs); // Return combined search results as context for AI
        //}


        //public async Task<string> CallAzureOpenAI(string endpoint, string deployment, string apiKey, string apiVersion, string userQuery, string context)
        //{            
        //    string azureOpenAiEndpoint = "https://azopenaipilot.openai.azure.com/openai/deployments/gpt-4o/chat/completions?api-version=2024-02-15-preview";
        //    using HttpClient client = new HttpClient();
        //    client.DefaultRequestHeaders.Add("api-key", apiKey);

        //    var requestData = new
        //    {
        //        messages = new[]
        // {
        //    new { role = "system", content = "You are an AI assistant. Use the following filtered data to answer the user's query accurately." },
        //    new { role = "system", content = $"Filtered Data:\n{context}" },
        //    new { role = "user", content = userQuery }
        //},
        //        max_tokens = 300
        //    };
        //    string jsonRequest = JsonSerializer.Serialize(requestData, new JsonSerializerOptions { WriteIndented = true });
        //    var content = new StringContent(jsonRequest, Encoding.UTF8, "application/json");

        //    HttpResponseMessage response = await client.PostAsync(azureOpenAiEndpoint, content);
        //    string responseString = await response.Content.ReadAsStringAsync();
        //    using JsonDocument doc=JsonDocument.Parse(responseString);
        //    JsonElement root = doc.RootElement;
        //    var responseMessage = root.GetProperty("choices")[0].GetProperty("message").GetProperty("content").GetString();

        //    return responseMessage ?? "No response from AI.";
        //}
    }
}

